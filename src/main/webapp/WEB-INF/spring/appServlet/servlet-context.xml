<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"></beans:property>
	</beans:bean><!-- 엑셀파일 리턴할거면 요런것처럼 새로bean을 만드는 custerm -->


	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"></beans:property>
	</beans:bean>

	<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
      <beans:property name="locations" value="classpath:DB/config/*.properties"></beans:property>
   </beans:bean>

<beans:bean class="com.iu.s5.interceptor.NoticeInterceptor" id="noticeInterceptor"></beans:bean>
<beans:bean class="com.iu.s5.interceptor.MemberInterceptor" id="memberInterceptor"></beans:bean>
<beans:bean class="com.iu.s5.interceptor.QnaInterceptor" id="qnaInterceptor"></beans:bean>

	<!-- 2가지 정보필요 / 순서가 중요 -->
	<interceptors>
	
		<interceptor>
			<mapping path="/qna/*"/>
			<exclude-mapping path="/qna/qnaList"/>
			<beans:ref bean="qnaInterceptor"/>
		</interceptor>
	
		<interceptor>
<!-- 		
			방법1. mapping 은 중복으로도 가능하다
			<mapping path="/notice/noticeWrite"/>
			<mapping path="/notice/noticeUpdate"/>
			<mapping path="/notice/noticeDelete"/>
			 -->
			
			<!--방법2. List, Select 제외 admin만 접근가능 -->
			<mapping path="/notice/*"/>
			<exclude-mapping path="/notice/noticeList"/>
			<exclude-mapping path="/notice/noticeSelect"/>	
			
					
			<!-- beans:ref 만들어진 객체를 참조하자는 의미 / bean안에 참조하고자하는 객체 id넣기-->
			<beans:ref bean="noticeInterceptor"/>
			
		</interceptor>
		
		<interceptor>
			<mapping path="/member/memberMyPage"/>
			<beans:ref bean="memberInterceptor"/>
		</interceptor>
	
		<interceptor>
			<!-- 1. URL 패턴 / 모든주소는 controller거쳐가기("/*") -->
			<mapping path="/*"/>

			<!-- 2. Interceptor class / interceptor를 만들면서 시작하겠다는 의미 beans:bean안에 preHandle,postHandle,afterCompletion존재 -->
			<beans:bean class="com.iu.s5.interceptor.TestInterceptor"></beans:bean>
		</interceptor>
		
	</interceptors>
	
	<context:component-scan base-package="com.iu.s5" />
	
	
	
</beans:beans>
